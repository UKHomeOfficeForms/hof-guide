{"data":{"siteSearchIndex":{"index":{"version":"0.9.5","fields":["title","tags"],"ref":"id","documentStore":{"docs":{"31d3d8ec-636f-5e5b-9a7d-5f320714768f":{"id":"31d3d8ec-636f-5e5b-9a7d-5f320714768f","title":"Supported Services","html":"```toc\n```\n##   Services currently supported by the HOF Team\n\n### Repositories\n* [Appeal Rights Exhausted (ARE) - (Home Office)](https://github.com/UKHomeOffice/AppealRightsExhausted)\n* [Biometric Residence Permit (BRP) - (Home Office)](https://github.com/UKHomeOffice/brp_app)\n* [Firearms Licensing (Home Office)](https://github.com/UKHomeOffice/firearms)\n* [Future Borders & Immigration Service (FBIS) - (Home Office)](https://github.com/UKHomeOffice/fbis-ccf)\n* [General Register's Office (GRO) - (Home Office)](https://github.com/UKHomeOffice/gro)\n* [Modern Slavery National Referral Mechanism (NRM) - (Home Office)](https://github.com/UKHomeOffice/modern-slavery)\n* [Refugee Integration Loan (RIL) - (Home Office)](https://github.com/UKHomeOffice/refugee-integration-loan) \n* [Report Online Terrorist Material (ROTM) - (Home Office)](https://github.com/UKHomeOffice/rotm)\n* [UKVI Complaints (Home Office)](https://github.com/UKHomeOffice/Complaints)\n* [UKVI Ending A Tenancy (Home Office)](https://github.com/UKHomeOffice/end-tenancy)\n\n## Services managed *outside* of the HOF Team\n* [Contact UK Trade & Investment (UK Trade & Investment)](https://github.com/UKTradeInvestment/contact-ukti)\n","slug":"/supported-services/"},"a1fa70c6-69eb-59d6-bb3e-5ecbf68a40a4":{"id":"a1fa70c6-69eb-59d6-bb3e-5ecbf68a40a4","title":"API Integration","html":"","slug":"/HOF_Framework/api-integration/"},"d0175320-8b70-5d92-a90f-9d9f4f75b5a8":{"id":"d0175320-8b70-5d92-a90f-9d9f4f75b5a8","title":"Content and i18n","html":"```toc\n# This code block gets replaced with the Table Of Contents\n```\nhof comes with multi-language support out-of-the-box.\n\nIt uses a translation library to load content from a set of language specific json files to display in your app.\n\n## Default application content\n\nIf you have used the `hof-generator` to initialise your application you will see a translations directory at `./apps/my-hof-app/translations` with something like the following file structure:\n\n```\napps/my-hof-form/translations\n└─┬ src/\n  └─┬ en/\n    ├── fields.json\n    ├── journey.json\n    └── pages.json\n```\n\nThese json files contain the translated content for the following application features.\n\n### journey\n\nThis contains the application-wide content that applies to all pages in your application. In most cases this is only the application title as shown in the header bar.\n\n### pages\n\nThis contains page-specific content for each page of your app. The top level keys in `pages.json` correspond to the routes onto which your steps are mounted, as defined in your application config.\n\nFor example, to add the content for the address step we created earlier at `/address` then you would add the following to your `pages.json`:\n\n```json:title=pages.json\n{\n  \"name\": {\n    \"header\": \"Personal details\",\n  },\n  \"address\": {\n    \"header\": \"Address details\"\n  }\n}\n```\n\nThe key for each section of the `pages.json` file should match the url path of the step.\n\nBy default a `header` and optional `intro` are loaded for each page. If you are using a custom template for a page then you might wish to define further page-level translations here.\n\n### fields\n\nThis contains the content for each field, with the keys as per the field names in your fields configuration.\n\nThe properties available for each field vary slightly according to the field type, but the following are standard:\n\n* `label` - defines the label element text for text inputs and select boxes\n* `legend` - defines the legend text for radio and checkbox groups\n* `hint` - provides an optional help message\n* `options` - defines the options available for select elements and radio and checkbox groups\n\n#### options\n\nThe `options` translation for a radio/checkbox group or select element should consist of a label for each option as defined in the options for the field. For example, for a yes/no radio button group:\n\n```json:title=fields.json\n{\n  \"resident-in-uk\": {\n    \"legend\": \"Are you permanently resident in the United Kingdom?\",\n    \"options\": {\n      \"yes\": {\n        \"label\": \"Yes\"\n      },\n      \"no\": {\n        \"label\": \"No\"\n      }\n    }\n  }\n}\n```\n\n#### Validation messaging\n\nThe validation messages applicable to a field can also be defined as part of the field's translation by defining a `validation` object as part of the field's translation. For example - for an email input:\n\n```json:title=validation.json\n{\n  \"email-address\": {\n    \"label\": \"Email address\",\n    \"validation\": {\n      \"required\": \"Please enter an email address\",\n      \"email\": \"Please enter a valid email address containing an '@' symbol\"\n    }\n  }\n}\n```\n\nThis will then display the appropriate error message depending on the [validation type](https://github.com/UKHomeOfficeForms/hof-form-controller/blob/master/lib/validation/validators.js) which has failed.\n\nDepending on the type of validator which has failed, certain variables are available for use in messages.\n\n* `maxlength`/`minlength`/`exactlength` - expose the value of the length parameter as a variable with the same name - e.g. `\"Please enter at least {{minlength}} characters\"`\n* `before`/`after` - expose a `diff` property, which contains a stringified version of the limit - e.g. `'5 years'`, `'3 months'`\n\nIf you wish to define global fallback messages for particular validation types then you can create a `validation.json` which will be used if no field-specific messages are present.\n\n```json:title=validation.json\n{\n  \"required\": \"This field is required\",\n  \"minlength\": \"Enter at least {{minlength}} characters\"\n}\n```\n\n## Free text content\n\nIn cases where the content is more complex than simple strings, then free text content can be loaded in markdown format by using the `markdown` mixin in your page templates.\n\nIn your application's `views` directory, create the following folder structure:\n\n```\napps/my-hof-form/views\n└─┬ content/\n  └─┬ en/\n    └── free-text-content.md\n```\n\nIn your page template you can then include `{{#markdown}}free-text-content{{/markdown}}` and the rendered markdown content of that file will be included in your page.\n\n## Adding languages\n\nAdding support for a second language is then simply a case of duplcating your json and markdown files from an `en` directory into directories corresponding to the language code of the language you wish to add.\n\nSo to add Welsh language support you would copy the `en` directory to a `cy` directory resulting in the following file structure:\n\n```\napps/my-hof-form/translations\n└─┬ src/\n  ├─┬ en/\n  │ ├── fields.json\n  │ ├── journey.json\n  │ └── pages.json\n  └─┬ cy/\n    ├── fields.json\n    ├── journey.json\n    └── pages.json\n```\n\nAnd correspondingly for any markdown content:\n\n```\napps/my-hof-form/views\n└─┬ content/\n  ├─┬ en/\n  │ └── free-text-content.md\n  └─┬ cy/\n    └── free-text-content.md\n```\n\nYour hof app will then detect the language the user has requested from the `Accept-language` headers on their request and serve the appropriate content.\n","slug":"/HOF_Framework/content-and-i18n/"},"df8924b9-9279-5f8d-8e56-162a0bddb617":{"id":"df8924b9-9279-5f8d-8e56-162a0bddb617","title":"Customising Behaviour","html":"```toc\n# This code block gets replaced with the Table Of Contents\n```\nYou will also see in your configuration that the `/confirm` step has an additional `behaviours` option. This defines some custom functionality for that step.\n\n\"Behaviours\" are used to extend the default request pipeline from the [core form controller](https://github.com/ukhomeofficeforms/hof-form-controller) with custom functionality for you app.\n\nBefore writing your own behaviours it is helpful to understand the request/response flow, and what the different methods are used for.\n\n## The request pipeline\n\nThe underlying controller that handles the form GET/POST pipeline consists of a number of stages for form rendering and processing/validation that can be extended to perform advanced custom behaviour for your forms.\n\nAll of the pipeline methods are passed the request and response objects as arguments. Unless specified below, methods are also passed a callback as a third argument, which should be called with an `Error` if applicable.\n\n### GET Request Flow\n\n| Type          | Step          | Description                                       | Example                                                                                       |\n|---------------|---------------|---------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| GET           | configure      | Override global form configuration with request/session-specific details. Initial controller configuration available on `req.form.options`. | N/A |\n| GET           | getValues      | Retrieves any values required for this step. By default, this is a copy of the data stored on the user's session. This method is passed a callback as a third argument, which should be called with an error if required and the values as a second argument. Any values passed to the callback are written to `req.form.values`. | Example: ```js getValues(req, res, (err, values) => { if (err) throw err; req.form.values = values; }) ``` |\n| GET           | locals         | Loads any data required for rendering the page template as key-value pairs synchronously. | N/A |\n| GET           | render         | Uses Mustache to render the step HTML to the user. Unlikely to need modification unless returning non-HTML. | N/A |\n\n### POST Request Flow\n\n| Type          | Step          | Description                                       | Example                                                                                       |\n|---------------|---------------|---------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| POST          | configure      | Override global form configuration with request/session-specific details. Initial controller configuration available on `req.form.options`. | Example: ```js configure(req, res) { req.form.options.title = 'Custom Title'; } ``` |\n| POST          | process        | Normalizes the input data from `req.body` and writes any data to `req.form.values` to be consumed by later steps. | N/A |\n| POST          | validate       | Perform any custom validation required. By default, all the fields are validated according to the rules defined in the field configuration (or custom rules defined in `configure`). | Example: ```js validate(req, res) { if (req.form.values.age < 18) return 'Age must be 18 or older'; } ``` |\n| POST          | saveValues     | Saves the processed values from the form to persistent storage for later retrieval. By default, this writes the values from `req.form.values` to the user's session. | N/A |\n| POST          | successHandler | Performs post-success actions on the form. By default, this redirects the user to the subsequent form step. | N/A |\n\n### Sessions\n\n| Type          | Action        | Description                                       | Example                                                                                       |\n|---------------|---------------|---------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| N/A           | Access        | The user's session can be accessed at any time via `req.sessionModel`. | Example: ```js const sessionData = req.sessionModel.get('userData'); ``` |\n| N/A           | Methods       | Methods available: `get`, `set`, and `unset`.    | Example: ```js req.sessionModel.set('isLoggedIn', true); ``` |\n\n### Behaviours\n\n| Type          | Action        | Description                                       | Example                                                                                       |\n|---------------|---------------|---------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| N/A           | Configuration | To add a custom behavior to a form step, you can set a `behaviours` option on the step configuration (note that this *cannot* be done dynamically, and must be hard-coded in the step configuration). | N/A |\n| N/A           | Loading       | Behaviours can either be loaded from external modules (for example [hof-behaviour-summary-page](https://github.com/UKHomeOfficeForms/hof-behaviour-summary-page) or [hof-behaviour-address-lookup](https://github.com/UKHomeOfficeForms/hof-behaviour-address-lookup)) or from files within your own codebase. The patterns are the same in each case. | N/A |\n| N/A           | Composition   | The `behaviours` option can be set with either a single behavior directly, or as an array of behaviours which are composed upon one another. If multiple behaviours are passed then they are composed onto the base controller from left-to-right, so each behaviour will have methods from the previous behaviours available as `super`. | N/A |\n\n\n### Writing a behaviour\n\nThe simplest form of a behaviour is a [mixin function](https://www.npmjs.com/package/mixwith#define-a-mixin), which takes a class as an argument, and extends it with custom methods.\n\n```js:title=example-configure-behaviour.js\n// my-behaviour.js\nmodule.exports = superclass => class extends superclass {\n  configure(req, res, next) {\n    super.configure(req, res, err => {\n      // do some custom configuration here\n      next(err);\n    });\n  }\n};\n```\n\nYou can then apply this behaviour to a step as follows:\n\n```js:title=behaviour-in-steps.js\nmodule.exports = {\n  steps: {\n    '/my-step': {\n      behaviours: require('./my-behaviour')\n    }\n  }\n};\n```\n\n### Configurable behaviours\n\nIn most cases, we will want custom behaviours to be configurable - for example, the [emailer behaviour](https://github.com/UKHomeOfficeForms/hof-behaviour-emailer) - so the same behaviour can be re-used with different options.\n\nIn this case we can define our behaviour as a function which receives configuration options and returns a mixin function.\n\n```js:title=example-saveValues.js\n// reverse-a-key.js\nmodule.exports = config => superclass => class extends superclass {\n  saveValues(req, res, next) {\n    req.form.values[`${config.key}-reversed`] = reverse(req.form.values[config.key]);\n    super.saveValues(req, res, next);\n  }\n};\n```\n\nYou can then apply this behaviour to a step as follows:\n\n```js:title=behaviour-in-step.js\nconst reverse = require('./reverse-a-key');\n\nmodule.exports = {\n  steps: {\n    '/my-step': {\n      fields: ['name'],\n      behaviours: reverse({ key: 'name' })\n    }\n  }\n};\n```\n### Validation behaviour\nWe can configure custom validations as a behaviour using the ```validate``` method:\n```js:title=validation-behaviour.js\nmodule.exports = SuperClass => class extends SuperClass {\n  validate(req, res, next) {\n    if (req.form.values.email.toLowerCase() !== req.form.values.emailVerify.toLowerCase()) {\n      return next({\n        emailVerify: new this.ValidationError(\n          'emailVerify',\n          {\n            type: 'notSame'\n          }\n        ),\n        email: new this.ValidationError(\n          'email',\n          {\n            type: 'notSame'\n          }\n        )\n      });\n    } super.validate(req, res, next);\n    return next;\n  }\n};\n```\nThe behaviour is applied to a step:\n```js:title=behaviour-in-step.js\nmodule.exports = {\n  steps: {\n    '/email': {\n      behaviours: [VerifyEmail],\n      fields: ['email', 'emailVerify'],\n    }\n  }\n};\n```\n\nThe validation message is then set against the configured type in translations/validation.json:\n```json:title=validation.json\n\"email\": {\n  \"notSame\": \"Your email addresses do not match\"\n}\n```\n\n### Completion behaviour\n\nIn addition to any custom behaviours, hof ships with a \"complete\" behaviour out of the box. Adding this behaviour to a step means that once it has been successfully submitted the user's session is marked as complete, and they cannot go back to earlier steps, only access the immediately subsequent step.\n\nThis can be set on a step by simply setting the string `'complete'` as a behaviour. It would be expected that this would normally run in conjunction with a behaviour that extends `saveValues` to submit the user's application.\n\n```js:title=framework-and-custom-behaviours.js\nconst submit = require('./my-submission-behaviour');\n\nmodule.exports = {\n  steps: {\n    '/declaration': {\n      behaviours: ['complete', submit],\n      next: '/confirmation'\n    },\n    '/confirmation': {\n      // only this step can be accessed once \"declaration\" step is submitted\n    }\n  }\n};\n```\n","slug":"/HOF_Framework/customising-behaviour/"},"27d62774-5c03-50ad-bf7e-f020664ade6f":{"id":"27d62774-5c03-50ad-bf7e-f020664ade6f","title":"GovUKNotify","html":"\nThis page will illustrate a step-by-step guide for using GovUKNotify to send out emails and assuming you have an account and a member of the HOF team.\n\nLinks:\n\n* https://www.notifications.service.gov.uk/\n\n> Some features in this documentation may not be up-to-date or not reflective based on the permissions set on your account.\n\n##  New Project set up \n\n### To create service:\n\n1. Visit GovUKNotify and login.\n2. Click on Switch Service\n3. Click on \"Add a new service\" and provide the name\n\n\n### Creating templates:\n\n1. Switch into the appropriate service\n2. Select Templates\n3. Click on new template\n   4. Complete the process for your designed template\n      5. You may clone a template and edit as needed\n6. Copy the `Template ID` post completion and store this safely\n7. Click on API integration\n8. Generate an `API key`\n9. Select the permissions for the key \n10. Store the key safely\n\n> Store the `Template ID` and `API key` as env values and use as needed in the application \n\n\n\n\n\n","slug":"/HOF_Framework/govuknotify/"},"acebf71f-4834-5a33-8748-75586959e019":{"id":"acebf71f-4834-5a33-8748-75586959e019","title":"Static Pages","html":"```toc\n# This code block gets replaced with the Table Of Contents\n```\nPages define the static pages for your app such as, `/cookies` or `/terms-and-conditions`.\nThey can be defined in an existing app adjacent to `steps` or in an app of their own, without `steps`.\n\n## Adding pages\n\nOpen the index.js file in a text editor. You will see a configuration that looks like this.\n\n```js:title=add-page-to-steps.js\nsteps: {\n  ...\n  '/confirm': {\n    behaviours: ['complete', require('hof-behaviour-summary-page')],\n    next: '/complete'\n  },\n  ...\n}\n```\n\nNow define the `pages`, where a key (`'/cookies'`) is the path to the page and a value (`'cookies'`) is the name of the view used to render the page.\n\n```js:title=static-pages.js\nsteps: {\n  ...\n  '/confirm': {\n    behaviours: ['complete', require('hof-behaviour-summary-page')],\n    next: '/complete'\n  },\n  ...\n},\npages: {\n  '/cookies': 'cookies',\n  '/privacy-policy': 'privacy',\n}\n```\n\n\n### Custom view location\n\nBy default views are loaded from the views directory in the current working directory. If necessary, views can be loaded from a custom location, set by adding a `views` option to the configuration for the route, e.g;\n\n```js:title=custom-view-steps.js\nviews: './my/custom/views',\npages: {\n  '/cookies': 'cookies',\n  '/privacy-policy': 'privacy',\n}\n```\n\n\nMake sure you have a view with the appropriate name in the apps\\` views directory, or the custom views location if it's set, one called `cookies.html` and another called `privacy.html`.\n\nNow if you restart your server and go to `http://localhost:8080/my-hof-form/cookies` in the browser you should see the content of the cookies view rendered to the browser. Visit `http://localhost:8080/my-hof-form/privacy-policy` and you will see the content of the privacy view rendered to the browser.\n","slug":"/HOF_Framework/static-pages/"},"cb54beb3-df23-5165-978b-60693864621d":{"id":"cb54beb3-df23-5165-978b-60693864621d","title":"Publishing a HOF package","html":"\n```toc\n# This code block gets replaced with the Table Of Contents\n```\n## Publishing a HOF beta version\n\nSometimes a developer may need to upgrade the HOF framework as an improvement or to patch security issues by upgrading dependencies. Upgrades to dependencies that are major (e.g. redis v3.2.1 to redis v4.6.6) should be tested on a few HOF services before releasing a new version of HOF.\n\nFor the correct permissions ensure you are a member of hof organisation on https://www.npmjs.com/.\nYou may also need to login to the terminal with your npm credentials before being able to publish.\n\n\n## Tagging a HOF release\n\nBy default when ```npm publish``` is run it will tag the package and publish as latest. \n\nTo a tag and publish a beta upgrade for redis this could be entered as: ```npm publish --tag upgrade-redis-beta``` at the root directory of the HOF repo.\n\nOnce published it should look like this:\n\n<img src=\"../images/wiki_how_tos/published-hof-beta.png\" alt=\"Image Description\" width=\"75%\">\n\n\n## Using beta version in a service\n\nOpen package.json and paste the version: ```\"hof\": \"20.2.11-upgrade-redis-beta\"``` and then run yarn to install beta.\n\n","slug":"/HOF_Framework/publishing-hof-npm/"},"8f94ef0e-eb80-5ef6-8fc6-564f4fd8b96e":{"id":"8f94ef0e-eb80-5ef6-8fc6-564f4fd8b96e","title":"— Getting Started —","html":"```toc\n```\n## Preamble\n\nIt is expected when following these guides that you have a basic knowledge of unix terminals and are running OSX or a Linux operating system.\n\nIt is also expected that you have a working knowledge of javascript and node.js and are comfortable installing packages from npm. You should also be comfortable working with git.\n\nThis documentation is written with the assumption that you are using the latest versions of hof modules. Not all of this documentation will be relevant if you are not using the latest versions.\n\n## Requirements\n\nhof is built in [node.js](https://nodejs.org/en/), and so you'll need that installed first. At present all versions 4 and above are supported, although it is recommended that you use the [latest LTS version](https://github.com/nodejs/LTS#lts-schedule).\n\nHOF requires Node.js version 10.22.1 or greater and npm version 6.14.0 or greater. While you can use either npm or yarn for package management, the test scripts for hof expect yarn to be available. \n\nYou can check your installed versions by running `node -v`, `npm -v`, and `yarn -v` and update to the latest versions by running `npm install -g npm@latest` and `npm install -g yarn`.\n\nTo run hof apps locally for development you will either need a local instance of redis running, or docker installed.\n\n* How to [install redis on OSX](https://medium.com/@petehouston/install-and-config-redis-on-mac-os-x-via-homebrew-eb8df9a4f298#.jcwwhv7oz)\n* How to [install docker on OSX](https://docs.docker.com/docker-for-mac/install/#install-and-run-docker-for-mac)\n\n### Creating your first form\n\nThe fastest way to create a new hof app is to use the [hof skeleton app](https://github.com/UKHomeOfficeForms/hof-skeleton). This will provide you with a bare-bones hof form that you can build on top of.\n\nClone the repo into a destination folder of your chosing: \n\n`git clone git@github.com:UKHomeOfficeForms/hof-skeleton.git`\n\n(full setup instructions can be found in the [hof-skeleton readme](https://github.com/UKHomeOfficeForms/hof-skeleton?tab=readme-ov-file#hof-skeleton))\n\nInstall the initial dependencies `yarn install`\n\nYou can then start your app by running `docker-compose up` or `yarn start:dev` (needs local redis instance).\n\nIf you open [http://localhost:8080](http://localhost:8080) in a browser then you should see your app.\n","path":"/1-getting-started","slug":"/HOF_Framework/getting-started/"},"0fb9bd6d-e7c8-5773-96a8-ecf07e67f27d":{"id":"0fb9bd6d-e7c8-5773-96a8-ecf07e67f27d","title":"— Wiki Features —","html":"```toc\n```\n\n## Table of Contents\nAdd the following at the top of your content to navigate to headers using anchors easily. This will then appear like the table of contents above this.\n````\n```toc\n```\n````\n\n## Code Blocks\nYou can add code blocks like this specifying the language (in this case 'js' for Javascript) and a 'title' which names the code block and can refer to a file name.\n\n### How to setup code block\n````\n```js:title=example.js\nvar test = 'Test String';\nvar test2 = [{ number: 'two' }];\n\nvar test3 = [{ number: 'three' }];\n```\n````\n\\\nThis then appear like this in the markdown:\n```js:title=example.js\nvar test = 'Test String';\nvar test2 = [{ number: 'two' }];\n\nvar test3 = [{ number: 'three' }];\n```\n### How to copy/reuse code block\nYou can also copy code in code blocks by clicking this symbol to reuse it in whichever application you'd like to paste it into:\n![Copy Code Example](../../static/images/wiki_how_tos/copy-code.png)\n\n## Adding Inline Images\n\n### How to setup\nHere is an example of adding an inline image:\n```md:title=how-to-add-image\n![HOF Guide Test Image](../../static/images/homepage/hof-guide-app.png)\n```\n\\\nThis is what this looks like in reality:\n![HOF Guide Test Image](../../static/images/homepage/hof-guide-app.png)\n\n### How to reference\nAll images should ideally live in the 'static' directory. This is bundled so that the main index.js file for the homepage of the site can access relevant images outside of the markdown. It may be images can be accessed from any project folder as the plugin `gatsby-remark-images` is used to reference them. But this has not been tested so there could be unexpected behaviour.\n","slug":"/Wiki_How_Tos/1-wiki-features/"},"3dbe5920-c180-5ff7-b75b-737326f5e84d":{"id":"3dbe5920-c180-5ff7-b75b-737326f5e84d","title":"Session Timeout Warning","html":"\nThis is a basic documentation page to help developers use an updated version of the HOF framework to implement the session timeout warning in HOF forms.\n\n\n<br>\n\n```toc\n# This code block gets replaced with the Table Of Contents\n```\n\n## Package.json updates\n\n- Specify package to use `hof@~22.0.0`\n- Run `yarn install`\n\n- Make dev use the .env file (command varies on projects)\n```js:title=basic-dev-cmd.js\n\"dev\": \"NODE_ENV=development hof-build watch --env\"\n```\n## Setting the component and envs\nTo enable and customise the session timeout behaviour, you need to set the component in your project's `hof.settings.json` file:\n```js\n \"behaviours\": [\n    \"hof/components/session-timeout-warning\"\n  ]\n```\n\nThe default session expiry time in hof is **30 minutes**, with the timeout warning default being **5 minutes** before the session times out. If you need to adjust the time for this on your local machine, they can be set in the .env file e.g.\n```\nSESSION_TTL=900 // session is now 15 minutes\nSESSION_TIMEOUT_WARNING=60 // warning will now show 1 minute before session times out\n```\n## Breaking changes\n### Adding steps\n#### Session timeout step\nOnce the time runs out on the session, the user is redirected to the session-timeout page. This now requires that projects have the `/session-timeout` page included in the steps in index.js. An empty {} will pick up the default template from hof.\n```js:title=index.js\n'/session-timeout': {}\n```\n#### Exit step\nFor forms that do not use the save and exit functionality, when the user clicks 'Exit this form' the link goes to the `'/exit'` page. This now requires that projects have the `/exit` page included in the steps in index.js. An empty {} will pick up the default template from hof.\n```js:title=index.js\n'/exit': {}\n```\n#### Save and Exit Forms: Save and exit step\nForms that have the save and exit functionality require a `'/save-and-exit'` page. When the user clicks 'Sign out' the link goes to the `'/save-and-exit'` page.\n```js:title=index.js\n '/save-and-exit': {\n      backLink: false,\n      behaviours: [\n        saveAndExit\n      ]\n  }\n```\n#### Static pages\nIf you have static pages that do not require the session timeout warning to be displayed, you must ensure the template is not using ```{{<partials-page))...{{/partials-page}}``` template. This is because the session timeout warning is set in the `{{$form}}` element of `{{partials-page}}`. Your static page should use the ```{{layout}}...{{/layout}}``` template instead.\n\n  **Example: Changing the template for a static accessibility page so it does not display the session timeout warning**\n\n  Change:\n\n```html:title=accessibilty.html\n{{<partials-page}}\n  {{$page-content}}\n    {{#markdown}}accessibility{{/markdown}}\n  {{/page-content}}\n{{/partials-page}}\n```\n  to:\n\n```html:title=accessibilty.html\n{{<layout}}\n  {{$journeyHeader}}\n    {{#t}}journey.header{{/t}}\n  {{/journeyHeader}}\n    \n  {{$propositionHeader}}{{/propositionHeader}}\n    \n  {{$header}}\n    {{header}}\n  {{/header}}\n    \n  {{$content}}\n    {{#markdown}}accessibility{{/markdown}}\n  {{/content}}\n{{/layout}}\n```\n\n## Customising content\nBy default, the framework uses the standard content provided by HOF. If you wish to override this with custom content at the project level, you must set the following variables to `true` in `hof.settings.json`:\n\n```json:title=hof.settings.json\n {\n  \"behaviours\": [\n    \"require('../').components.sessionTimeoutWarning\"\n  ],\n  \"sessionTimeoutWarningContent\": true, // allows you to customise the content in the session timeout dialog box\n  \"exitFormContent\": true, // allows you to customise the content on the exit page\n  \"saveExitFormContent\": true // allows you to customise the content on the save-and-exit page\n }\n```\n\n ### Customising content in `pages.json`\n Once the variables are set, you can customise the session-timeout-warning, exit and save-and-exit messages in your project's pages.json:\n ```json:title=pages.json\n \"session-timeout-warning\": {\n   \"dialog-title\": \"Your application will close soon\",\n   \"dialog-text\": \"If that happens, your progress will not be saved\",\n   \"timeout-continue-button\": \"Stay on this page\",\n   \"dialog-exit-link\": \"Exit this form\"\n },\n \"exit\": {\n   \"message\": \"We have cleared your information to keep it secure. Your information has not been saved.\"\n },\n \"save-and-exit\": {\n   \"header\": \"Your report has been saved\",\n   \"paragraph-1\": \"You have until the <date> to update or submit your report.\",\n   \"paragraph-2\": \"We have sent a confirmation email to: <email>\",\n   \"paragraph-3\": \"You can return to your report at any time via the <a class=\"govuk-link\" href=\"/start\">start page</a> on GOV.UK\"\n  }\n ```\n\n ### Customising exit and save-and-exit steps\nYou can customise the `exit` and `save-and-exit` steps by setting the `exitStep` or `saveAndExitStep` properties in the `apps/<app_name>/index.js` to the desired path name:\n\n```js\n// customising exit step name\nmodule.exports = {\n  name: 'sandbox',\n  exitStep: '/leave',\n  steps: {\n    ...\n    '/leave': {\n      template: 'exit'\n    }\n  }\n  ...\n}\n```\n\n```js\n// customising save-and-exit step name\nmodule.exports = {\n  name: 'sandbox',\n  saveAndExitStep: '/sign-out',\n  steps: {\n    ...\n    '/sign-out': {\n      template: 'save-and-exit'\n    }\n  }\n  ...\n}\n```\n","slug":"/Wiki_How_Tos/3.session-timeout-warning/"},"63ac5103-3ef6-5b7f-a9d0-eb1a0e7043fe":{"id":"63ac5103-3ef6-5b7f-a9d0-eb1a0e7043fe","title":"Upgrade HOF To GovUK","html":"\nThis is a basic documentation page to illustrate changes. At time of writing, it is recommended to compare a repository\nwithout a non-gov implementation in HOF.In future this will not be necessary. In order to update your project \nyou will require access to these following urls for documentation/guidance provided.\n\n\n<br>\n\n```toc\n# This code block gets replaced with the Table Of Contents\n```\n\n## Useful links\n- [Gov UK Design System and Documentation](https://design-system.service.gov.uk)\n- [Github - Sulthans' Implementation for UKVIET](https://github.com/UKHomeOffice/end-tenancy/pull/201)\n\n\n## Package.json updates\n\n- Specify package to use `hof@20.0.0-beta.29`\n- Remove `govuk-frontend` in package.json\n- Run `yarn upgrade moment@^` - Time of writing it should prefer `^2.29.4`. This will fix a synk issue\n- Change the engine to support multiple versions of node\n\n```js:title=engine-block.js\n  \"engines\": {\n    \"node\": \">=14.15.0\"\n  },\n```\n- Make dev use the .env file (command varies on projects)\n```js:title=basic-dev-cmd.js\n\"dev\": \"NODE_ENV=development hof-build watch --env\"\n```\n## Remove govuk-frontend styles \n\n- Remove `@import \"govuk-frontend/all.scss\"` in app.scss\n\n## Run the application and start comparing \n\nNote down any broken pages/not similar then refer to the govuk documentation to specify the correct classnames. After \nfinishing run your `acceptance tests` to fix any classnames.\n\n```text\n Use chromes \"Copy selector\" functionality to update acceptance tests faster\n``` \n\n## Examples\n### Changes on NRM\n#### Custom Start page\n\nIf the start page does not fully take up the page and navigation links are too close the `two-thirds` class then use\nuse this function\n\n```js:title=index.js\nif (window.location.pathname === '/start' || window.location.pathname === '/paper-version-download') {\n  $('.govuk-grid-column-two-thirds')\n    .eq(1)\n    .addClass('govuk-grid-column-full')\n    .removeClass('govuk-grid-column-two-thirds');\n}\n```\n\n#### Toggling using checkbox-group for textarea\n\nFor example for custom pages that requires toggling a textarea through a checkbox-group \n\n```js:title=fields.js\n  'types-of-exploitation-other': {\n    mixin: 'checkbox-group',\n    legend: {\n      className: 'visuallyhidden'\n    },\n    options: [{\n      value: 'other',\n      toggle: 'other-exploitation-details',\n      child: 'textarea'\n    }]\n  },\n  'other-exploitation-details': {\n    mixin: 'textarea',\n    validate: ['required', {type: 'maxlength', arguments: [15000]}],\n    legend: {\n      className: 'visuallyhidden'\n    },\n    className: 'govuk-textarea',\n    attributes: [\n      {\n        attribute: 'rows',\n        value: 4\n      }\n    ],\n    dependent: {\n      value: 'true',\n      field: 'types-of-exploitation-other'\n    }\n  },\n```\n\nwith the partial\n\n```html:title=Partial.html\n<div id=\"other-exploitation-fieldset\" class=\"govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden\">\n    {{#renderField}}other-exploitation-details{{/renderField}}\n</div>\n```\n\n#### Toggling using Radio-box\n\n```js:title=field.js\n'does-pv-have-children': {\n    mixin: 'radio-group',\n    validate: ['required'],\n    legend: {\n      className: 'visuallyhidden'\n    },\n    options: [{\n      value: 'yes',\n      toggle: 'does-pv-have-children-yes-input',\n      child: 'partials/does-pv-have-children-yes-amount'\n    }, {\n      value: 'no'\n    }]\n  },\n```\n\nwith partial\n\n```html:partial.html\n<div id=\"does-pv-have-children-yes-input\" class=\"govuk-radios__conditional govuk-radios__conditional--hidden\">\n    {{#renderField}}does-pv-have-children-yes-amount{{/renderField}}\n</div>\n```\n\n\n### Page headings and warnings with Checkboxes and Radio buttons(Single Page Questions)\n Page headings are included in the fieldset for single page questions with checkboxes and radio buttons using `isPageHeading`. To place warning text between the heading and a checkbox/radio button form on such pages, use `isWarning`.\n\n ```js:title=fields > index.js\n 'choose-a-journey': {\n    isPageHeading: true,\n    isWarning: true,\n    mixin: 'radio-group',\n    validate: 'required',\n    options: [\n      'museums',\n      'new-dealer',\n      'shooting-clubs',\n      'supporting-documents'\n    ]\n  },\n ```\n `isWarning` can be configured in field/index.js as above. It can also be configured in a behaviour:\n\n ```js:title=behaviour.js\n module.exports =\n  superclass => class extends superclass {\n    configure(req, next) {\n      if (req.sessionModel.get('activity') === 'renew') {\n        Object.keys(req.form.options.fields).forEach(key => {\n          req.form.options.fields[key].isWarning = true\n        });\n      }\n      next()\n    }\n  }\n ```\n\n ### Adding warning text using a page template\n\n Warning text can be added on a page using the html partial warn.html. It needs to be placed in the html template and a `warning` key in pages.json; the partial needs to be placed in the page that requires the warning text. Below is an example of it being used in the ASC form with the html partial.\n\n ```json:pages.json\n \"declaration\": {\n    \"header\": \"Declaration\",\n    \"paragraph-1\": \"By continuing you confirm that:\",\n    \"paragraph-2\":  \"- the information you've given is correct\",\n    \"warning\": \"You could be prosecuted if you deliberately give untrue or misleading information.\"\n  }\n ```\n\n ```html:title=declaration.html\n {{<partials-page}}\n{{$page-content}}\n\n<div>\n  <p>{{#t}}pages.declaration.paragraph-1{{/t}}</p>\n  <ul>\n    <li>{{#t}}pages.declaration.paragraph-2{{/t}}</li>\n  </ul>\n  <br/>\n\n  {{> partials-warn}}\n\n\n  {{#fields}}\n    {{#renderField}}{{/renderField}}\n  {{/fields}}\n\n  {{#input-submit}}next{{/input-submit}}\n</div>\n{{/page-content}}\n{{/partials-page}}\n\n ```\n\n ```html:title=warn.html\n<div class=\"govuk-warning-text\">\n    <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n    <strong class=\"govuk-warning-text__text\">\n    <span class=\"govuk-warning-text__assistive\">Warning</span>\n        {{warning}}\n    </strong>\n</div>\n ``` \n\n  ### Adding prefixes and suffixes to an input field in hof\n\n  Inside hof, the `isPrefixOrSuffix` key is defined which returns `true` if there is a prefix or a suffix as shown below.\n  \n  ```js:title=frontend/template-mixins/mixins/template-mixins.js\n  function inputText(key, extension) {\n    const field = Object.assign({}, this.options.fields[key] || options.fields[key]);\n    ...\n    return Object.assign({}, extension, {\n      ...\n      attributes: field.attributes,\n      isPrefixOrSuffix: _.map(field.attributes, item => {if (item.prefix || item.suffix !== undefined) return true;}),\n    });\n  }\n   ```\n   This key is used in template-mixins/partials/forms/input-text-group.html which if `true` wraps the input field with `<div class=\"govuk-input__wrapper\">` as shown below. \n\n   ```html:title=frontend/template-mixins/partials/forms/input-text-group.html\n       {{#isPrefixOrSuffix}}<div class=\"govuk-input__wrapper\">{{/isPrefixOrSuffix}}\n        {{#attributes}}\n            {{#prefix}}\n                <div class=\"govuk-input__prefix\" aria-hidden=\"true\">{{prefix}}</div>\n            {{/prefix}}\n        {{/attributes}}\n        <input\n        ...\n        >\n        {{#attributes}}\n            {{#suffix}}\n                <div class=\"govuk-input__suffix\" aria-hidden=\"true\">{{suffix}}</div>\n            {{/suffix}}\n        {{/attributes}}\n    {{#isPrefixOrSuffix}}</div>{{/isPrefixOrSuffix}}\n   ```\n   \n  Fields that do not contain a prefix or suffix should not exist inside `<div class=\"govuk-input__wrapper\">` according to the latest design system service update. An input field can contain a prefix and a suffix which is displayed below in an example from the sandbox app.\n\n#### How to add prefixes and suffixes to a field within a service\n\n```js:title=fields.js\n  income: {\n    attributes: [{prefix: '£', suffix: 'per month'}],\n  }\n```\n\n  ![Field with prefix and suffix](../../static/images/wiki_how_tos/prefix-suffix-field.png)\n\n### Clickable validation summary for input-date mixins\n\nWhen there is an error, if the `field.mixin` is an `input-date` The string `'-day'` is suffixed onto the `key`, which here refers to the field. This is assigned to the `errorLinkId` property which is what allows the validation error summary to link to the field which has the error.\n\n```js:title=controller/controller.js\n  _getErrors(req, res, callback) {\n    super._getErrors(req, res, () => {\n      Object.keys(req.form.errors).forEach(key => {\n        if (req.form && req.form.options && req.form.options.fields) {\n          const field = req.form.options.fields[key];\n          ...\n          // get first field for date input control\n          else if (field && field.mixin === 'input-date') {\n            req.form.errors[key].errorLinkId = key + '-day';\n          } else {\n            req.form.errors[key].errorLinkId = key;\n          }\n        }\n        ...\n      });\n      callback();\n    });\n  }\n```\n\nThe validation error summary will now be a clickable link which will take the user to the first field if there is an error. This follows the latest govuk design system guidelines except where the date entered cannot be correct (e.g. '13’ in the month field cannot be correct.) and where the date is incomplete (e.g. day, month or year field where the information is missing or incomplete.)  In those two cases the guidelines recommend that the individual field should be highlighted but since hof uses moment js' validator which returns the whole date field as incorrect, our current configuration follows the guidelines.\n\n#### Adding input-date mixin to a field within a service\n\nAs shown below in the sandbox application `mixin: 'input-date'` has been added to a date field in fields.js. \n\n```js:title=fields.js\n\n  'dateOfBirth': dateComponent('dateOfBirth', {\n    mixin: 'input-date',\n    isPageHeading: 'true',\n    validate: [\n      'required',\n      'date',\n      { type: 'after', arguments: ['1900'] }\n    ]\n  })\n```\n\n![Field with clickable validation summary](../../static/images/wiki_how_tos/validation-summary-clickable.png)\n\n### Format input text fields\nInput text fields for phone numbers, postcodes, town/cities and counties have different sizes to the default input text box. Therefore the corresponding ```className```  attrubute should be added to the fields config where relevant to format the size:\n#### Town/City\n```js:title=fields.js\ntownOrCity: {\n    validate: ['required', 'notUrl',\n      { type: 'regex', arguments: /^([^0-9]*)$/ },\n      { type: 'maxlength', arguments: 100 }\n    ],\n    className: ['govuk-input', 'govuk-!-width-two-thirds']\n  }\n```\n\n#### Postcode\n```js:title=fields.js\n  postcode: {\n    validate: ['required', 'postcode'],\n    formatter: ['removespaces', 'uppercase'],\n    className: ['govuk-input', 'govuk-input--width-10']\n  }\n```\n\n#### Phone\n```js:title=fields.js\n  phone: {\n    validate: ['required', 'internationalPhoneNumber'],\n    className: ['govuk-input', 'govuk-input--width-20']\n  }\n```","slug":"/Wiki_How_Tos/2.gov-uk-updates/"},"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"id":"0751a9a3-8b65-5c76-9ca7-527e908dba83","title":"Add New Page","tags":["add-page"],"html":"```toc\n```\n## Creating wiki posts\n\n1. Create md file in `wiki/<topic>/<post>.md`\n\n2. You can copy the below code as a template for your .md file. The minimum you need is a 'title' and a table of contents (toc) which ensures any headers are anchored so you may navigate the page more easily.\n\n````md:title=example-topic-matter.md\n---\ntitle: Example Title\n---\n```toc\n# This code block gets replaced with the Table Of Contents\n```\n## Initial Header\n````\n3. Add post content 👌. N.B. - **An initial header is needed if you are using the `toc` section.**\n4. FYI - you can name the directory and the filename anything. In the markdown matter, `title` drives the content in the UI and any nested directories within the `/wiki` folder drives the sidebar navigation tree to the left along with the site routing.\n\n## Additional Tips & Tricks\n\n### File Hierarchy\n","slug":"/Wiki_How_Tos/add-new-page/"},"e77352b3-25b9-5adb-b316-4ba660155978":{"id":"e77352b3-25b9-5adb-b316-4ba660155978","title":"Advanced Form Customisation","html":"```toc\n```\nThis section of will assume you already have a basic understanding of the framework, and have gone through Basic Form Customisation. \n\n# Configuring Steps\n\n## Journey Forking\n\nFor each step definition can have a `next` property, the value of which is the next route in the journey. If the step in the form is successfully submitted, by default the `next` step will load. However, sometimes you will want to go to a different page depending on the users response to a quesiton in the form, this is where you can use the `forks` property. \n\n```js\n\n'/my-page': {\n    next: '/next-page',\n    forks: [{\n        target: '/fork-page',\n        condition: {\n            field: 'example-radio',\n            value: 'superman'\n        }\n    }]\n}\n```\n\nThe `condition` property can also take a function. In the following example, if the field called 'name' is more than 30 characters in length, the page at '/fork-page' will be loaded.\n\n```js\n\n'/my-page': {\n    next: '/next-page',\n    forks: [{\n        target: '/fork-page',\n        condition: function (req, res) {\n            return req.form.values['name'].length > 30;\n        }\n    }]\n}\n```\n\nForks is an array and therefore each fork is interrogated in order from top to bottom. The last fork whose condition is met will assign its target to the next page variable.\n\nIn this example, if the last condition resolves to true - even if the others also resolve to true - then the page at '/fork-page-three' will be loaded. The last condition to be met is always the fork used to determine the next step.\n\n```js\n\n'/my-page': {\n    next: '/next-page',\n    forks: [{\n        target: '/fork-page-one',\n        condition: function (req, res) {\n            return req.form.values['name'].length > 30;\n        }\n    }, {\n        target: '/fork-page-two',\n        condition: {\n            field: 'example-radio',\n            value: 'superman'\n        }\n    }, {\n        target: '/fork-page-three',\n        condition: function (req, res) {\n            return typeof req.form.values['email'] === 'undefined';\n        }\n    }]\n}\n```\n\n# Configuring Fields\n\n## Conditionally Revealling a Question\n\nFor questions using the radio or checkbox components, you can conditonally reveal a question when they select a particular option so the user will only see a question when it is relevent to them. For more details on when to use this follow the Government Design System (GDS) Guidance. \n\n[Radio](https://design-system.service.gov.uk/components/radios/)\n[Checkboxes](https://design-system.service.gov.uk/components/checkboxes/)\n\nTo do this using the HOF framework, in the index.js file, add the step which will have the conditional reveal question and add all the fields which will be displayed on the page, including the ones which will be conditionally revealed. \n\n```js:title=index.js\n  steps: {\n    '/contact': {\n      fields: [\n        'contactDetails',\n        'email-text',\n        'phone-text'      \n      ]\n      next: '/address' \n    }\n```\nIn the field.js file, for the main radio/ checkbox option, define the mixin for the field and add the values to each of the options. In the options array, where you would add the value of the options for the radio/checkbox, also add a `toggle` property to each option with the the name of the field you want to conditionally reveal.\n\n```js:title=field.js\n    'contactDetails': {\n      mixin: 'radio-group',\n      validate: ['required'],\n      legend: {\n        className: 'visuallyhidden'\n      },\n      options: [{\n        value: 'email',\n        toggle: 'email-text'\n      }, {\n        value: 'phone',\n        toggle: 'phone-text'\n      }]\n    }, \n```\nOnce you have defined the radio/checkbox field, define your new conditionally revealed fields. With these fields you will need to add a `dependent` property to the field. This property will define when the field is revealed, so it takes an object with a value which will be the value of the option selected, and the a field property which will have a value which is the name of the radio/checkbox field. \n\n```js:title=field.js\n    'contactDetails': {\n      mixin: 'radio-group',\n      validate: ['required'],\n      legend: {\n        className: 'visuallyhidden'\n      },\n      options: [{\n        value: 'email',\n        toggle: 'email-text'\n      }, {\n        value: 'phone',\n        toggle: 'phone-text'\n      }]\n    }, \n    'email-text': {\n      validate: ['required'],\n      dependent: {\n        value: 'email',\n        field: 'contactDetails'\n      }\n    },\n     'phone-text': {\n      validate: ['required'],\n      dependent: {\n        value: 'phone',\n        field: 'contactDetails'\n      }\n    },\n```\nAt this point, when you view your page in your browser you will see the labels to all the fields and the radio/checkbox fields. When you then select one of these options, the input field will then appear. As you do not want to see the labels of the conditionally revealed steps before the user has selected one of the options, in the views folder, create a html file with the same name as the step, in this case contact.html and use the following code to render the radio/checkbox field only. Inbetween the `renderfield` tags add the name of the radio/checkbox field. \n\n```html:title=views/contact.html\n{{<partials-page}}\n  {{$page-content}}\n\n    {{#renderField}}contactDetails{{/renderField}}\n\n    {{#input-submit}}continue{{/input-submit}}\n  {{/page-content}}\n{{/partials-page}}\n```\nAt this point, when you view the page you will now only see the radio/checkbox fields and when you select one of the options the field will not be revealed. To fix this, in your views folder, create a partials folder, and add a html file with the following code: \n\n```html:title=views/partials/toggle.html\n<div id=\"{{toggle}}-panel\" class=\"reveal\" aria-hidden=\"false\">\n  <div class=\"panel-indent\">\n    {{#input-text}}{{toggle}}{{/input-text}}\n  </div>\n</div>\n```\nIn the field.js file add a `child` property to the options array, which will be the path to the file just created in the partials folder. \n\n```js:title=field.js\n  'contactDetails': {\n    mixin: 'radio-group',\n    validate: ['required'],\n    legend: {\n      className: 'visuallyhidden'\n    },\n    options: [{\n      value: 'email',\n      toggle: 'email-text',\n      child: 'partial/toggle'\n    }, {\n      value: 'phone',\n      toggle: 'phone-text',\n      child: 'partial/toggle'\n    }]\n  },\n```\n\nYou should now have a radio/checkbox question, which will reveal another question when the user selects an options, from here you can add labels and validations to the fields. \n\n","slug":"/HOF_Framework/Form Customisations/advanced-form-customisation/"},"6b529bb2-d33d-57a7-899a-98adedaa8582":{"id":"6b529bb2-d33d-57a7-899a-98adedaa8582","title":"Update The Wiki","html":"To renew the HOF Guide site itself with the latest Gov UK Javascript & Styling.<br></br>\n\nUse the <Link to=\"https://x-govuk.github.io/govuk-eleventy-plugin/get-started/\">X-GovUK Eleventy Plugin</Link> setup\nto regenerate them and use the 'govuk.css' and 'govuk.js' files to replace the equivalent in this projects under stylesheets and components respectively. Also update any urls in the 'govuk.scss' file with relative links directory to the images folder. For example:\n```css:title=example-url.css\n.govuk-footer__copyright-logo {\n  background-image: url(\"../images/govuk-crest.png\");\n}\n```\n","slug":"/Wiki_How_Tos/update-the-wiki/"},"aaf73720-fe32-5b67-af9d-698e487a119a":{"id":"aaf73720-fe32-5b67-af9d-698e487a119a","title":"Basic Form Customisation","html":"```toc\n# This code block gets replaced with the Table Of Contents\n```\nNow we have a basic form created then the next job is to add some steps and fields to our new form.\n\nIn the directory we just created we should now find a directory `./apps/my-hof-form`. This contains the configuration and code for our app.\n\nIts contents should look something like this:\n\n```\napps/my-hof-form/\n├── fields/\n├── translations/\n└── index.js\n```\n\n## Adding Steps\n\nOpen the index.js file in a text editor. You will see a steps configuration that looks like this:\n\n```js:title=example-steps.js\nsteps: {\n  '/name': {\n    fields: ['name'],\n    next: '/confirm'\n  },\n  '/confirm': {\n    behaviours: ['complete', require('hof-behaviour-summary-page')],\n    next: '/complete'\n  },\n  '/complete': {}\n}\n```\n\nThis defines the steps that our form takes, and the fields which are displayed on those steps.\n\nThe keys of the `steps` object define the urls for each step.\n\nThe basic configuration options you need to add a step can be seen on the `/name` step. The `fields` option defines which fields will be displayed, and the `next` option defines the step to which the user is taken when they complete the step.\n\nTo add a new step between `/name` and `/confirm` to collect a user's address we add a child object with a key of `/address` to the steps object.\n\nSince it is going between `/name` and `/confirm` it should have a `next` property of `/confirm`, and we should modify the `next` property of the `/name` step to `/address`.\n\n```js:title=add-new-step.js\nsteps: {\n  '/name': {\n    fields: ['name'],\n    next: '/address'\n  },\n  '/address': {\n    next: '/confirm'\n    },\n  '/confirm': {\n  ...\n```\n\nNow if you restart your server (`Ctrl+C` to stop, then run the same command again) and go back to your form in the browser you will see that when you complete the `/name` step you are taken to `/address`.\n\n## Adding Fields\n\nNow we need to add some fields to our new address step. This is as simple as adding the keys for those fields to the `fields` property of our new step object.\n\nWe'll add five fields to this step to collect a full address.\n\n```js:title=add-field-to-steps.js\nsteps: {\n  ...\n  '/address': {\n    fields: ['address-line-1', 'address-line-2', 'town', 'country', 'postcode'],\n    next: '/confirm'\n  },\n  ...\n}\n```\n\nReturning to the app in a browser and refreshing (you will need to restart your server each time you make changes - you can have this happen automatically when running locally by running `npm run start:dev` to start your server, which is recommended when you're developing an app) you will now see these fields on the address page.\n\n### Configuring Fields\n\n#### Validation Rules\n\nThe next job is to configure the validation rules for our new fields. The configuration for this can be found in `./fields/index.js` in our app directory.\n\nYou will see existing configuration for the `name` field that's already in our app. We can add new config objects for each of our new fields to this.\n\n```js:title=field-validations.js\nmodule.exports = {\n  name: {\n    validate: 'required'\n  },\n  'address-line-1': {},\n  'address-line-2': {},\n  town: {},\n  country: {},\n  postcode: {}\n};\n```\n\nWe want to make all of the fields except `address-line-2` mandatory, and so can give them a `validate` property of `'required'`.\n\n```js:title=required-validations.js\nmodule.exports = {\n  name: {\n    validate: 'required'\n  },\n  'address-line-1': {\n    validate: 'required'\n  },\n  'address-line-2': {},\n  town: {\n    validate: 'required'\n  },\n  country: {\n    validate: 'required'\n  },\n  postcode: {\n    validate: 'required'\n  }\n};\n```\n\nAdditionally, we might want to do validation on the postcode to make sure it is correctly formatted, and so we can add an additional `postcode` validator. To add multiple validators to a field, simply set the validate property to an array.\n\n```js:title=multiple-validations.js\npostcode: {\n  validate: ['required', 'postcode']\n}\n```\n\n* [full list of built-in validation types](https://github.com/UKHomeOfficeForms/hof-form-controller/blob/master/lib/validation/validators.js)\n\n#### Field Types\n\nBy default all fields are `input[type=text]` unless otherwise specified. In this case, we possibly want our country field to be a `select` element instead.\n\nTo do this we add a `mixin` property of `select` to that field.\n\n```js:title=field-mixins.js\ncountry: {\n  mixin: 'select',\n  validate: 'required'\n}\n```\n\nWe also need to add some options for the field. Fortunately there is a Home Office managed list of countries, so we don't need to handle this ourselves. Install `hof-util-countries` from npm, and then add the following:\n\n```js:title=field-options.js\ncountry: {\n  mixin: 'select',\n  options: require('hof-util-countries')(),\n  validate: 'required'\n}\n```\n\nFor more `mixin` options and field configuration settings see [hof-template-mixins](https://npmjs.com/hof-template-mixins).\n\n#### Formatter\n\nSome text inputs will include characters you don't wish to be recorded (e.g. hyphens or spaces). To remove these with the `formatter field`.\n\n```js:title=field-formatters.js\nsortCode: {\n  mixin: 'textarea'\n  validate: 'required',\n  formatter: ['removehyphens']\n}\n```\n\nYou can also use the formatter field to ensure the characters recorded are all in upper or lower case.\n\n```js:title=uppercase-formatter.js\nbrpNumber: {\n  mixin: 'textarea'\n  validate: 'required',\n  formatter: ['uppercase']\n}\n```\n\nFor other `formatting` options see [hof-controller-formatters](https://github.com/UKHomeOfficeForms/hof-form-controller/blob/master/lib/formatting/formatters.js)\n\n#### Field Labels\n\nThe last thing to do is to add some label content for our new fields. You will see that right now they appear with default labels like `fields.address-line-1.label`.\n\nTo add label content for our new fields we need to set some properties in `./translations/src/en/fields.json`. You will see here that there is a label defined for the name field. We can add some more labels for our new fields as follows:\n\n```json:title=fields.json\n{\n  \"name\": {\n    \"label\": \"Name\"\n  },\n  \"address-line-1\": {\n    \"label\": \"Address\"\n  },\n  \"address-line-2\": {\n    \"label\": \"Address line 2\"\n  },\n  \"town\": {\n    \"label\": \"Town\"\n  },\n  \"country\": {\n    \"label\": \"Country\"\n  },\n  \"postcode\": {\n    \"label\": \"Postcode\"\n  }\n}\n```\n\nReturning to your app in a browser you will now see that the new address fields now use the labels we defined for them.\n\n> [more information about how the content for fields can be configured](#fields)\n","slug":"/HOF_Framework/Form Customisations/basic-form-customisation/"}},"docInfo":{"31d3d8ec-636f-5e5b-9a7d-5f320714768f":{"title":2,"tags":0},"a1fa70c6-69eb-59d6-bb3e-5ecbf68a40a4":{"title":2,"tags":0},"d0175320-8b70-5d92-a90f-9d9f4f75b5a8":{"title":2,"tags":0},"df8924b9-9279-5f8d-8e56-162a0bddb617":{"title":2,"tags":0},"27d62774-5c03-50ad-bf7e-f020664ade6f":{"title":1,"tags":0},"acebf71f-4834-5a33-8748-75586959e019":{"title":2,"tags":0},"cb54beb3-df23-5165-978b-60693864621d":{"title":3,"tags":0},"8f94ef0e-eb80-5ef6-8fc6-564f4fd8b96e":{"title":2,"tags":0},"0fb9bd6d-e7c8-5773-96a8-ecf07e67f27d":{"title":2,"tags":0},"3dbe5920-c180-5ff7-b75b-737326f5e84d":{"title":3,"tags":0},"63ac5103-3ef6-5b7f-a9d0-eb1a0e7043fe":{"title":3,"tags":0},"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"title":3,"tags":2},"e77352b3-25b9-5adb-b316-4ba660155978":{"title":3,"tags":0},"6b529bb2-d33d-57a7-899a-98adedaa8582":{"title":2,"tags":0},"aaf73720-fe32-5b67-af9d-698e487a119a":{"title":3,"tags":0}},"length":15,"save":true},"index":{"title":{"root":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"31d3d8ec-636f-5e5b-9a7d-5f320714768f":{"tf":1}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"31d3d8ec-636f-5e5b-9a7d-5f320714768f":{"tf":1}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"3dbe5920-c180-5ff7-b75b-737326f5e84d":{"tf":1}},"df":1}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"acebf71f-4834-5a33-8748-75586959e019":{"tf":1}},"df":1}}},"r":{"docs":{},"df":0,"t":{"docs":{"8f94ef0e-eb80-5ef6-8fc6-564f4fd8b96e":{"tf":1}},"df":1}}}}},"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"a1fa70c6-69eb-59d6-bb3e-5ecbf68a40a4":{"tf":1}},"df":1}},"d":{"docs":{},"df":0,"d":{"docs":{"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"tf":1}},"df":1},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"e77352b3-25b9-5adb-b316-4ba660155978":{"tf":1}},"df":1}}}}}},"i":{"1":{"8":{"docs":{},"df":0,"n":{"docs":{"d0175320-8b70-5d92-a90f-9d9f4f75b5a8":{"tf":1}},"df":1}},"docs":{},"df":0},"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{"a1fa70c6-69eb-59d6-bb3e-5ecbf68a40a4":{"tf":1}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"d0175320-8b70-5d92-a90f-9d9f4f75b5a8":{"tf":1}},"df":1}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"df8924b9-9279-5f8d-8e56-162a0bddb617":{"tf":1},"e77352b3-25b9-5adb-b316-4ba660155978":{"tf":1},"aaf73720-fe32-5b67-af9d-698e487a119a":{"tf":1}},"df":3}}}}}}}},"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"df8924b9-9279-5f8d-8e56-162a0bddb617":{"tf":1}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"aaf73720-fe32-5b67-af9d-698e487a119a":{"tf":1}},"df":1}}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"u":{"docs":{},"df":0,"k":{"docs":{"63ac5103-3ef6-5b7f-a9d0-eb1a0e7043fe":{"tf":1}},"df":1,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"27d62774-5c03-50ad-bf7e-f020664ade6f":{"tf":1}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"t":{"docs":{"8f94ef0e-eb80-5ef6-8fc6-564f4fd8b96e":{"tf":1}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{"acebf71f-4834-5a33-8748-75586959e019":{"tf":1},"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"tf":1}},"df":2}},"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"cb54beb3-df23-5165-978b-60693864621d":{"tf":1}},"df":1}}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"cb54beb3-df23-5165-978b-60693864621d":{"tf":1}},"df":1}}}}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{"cb54beb3-df23-5165-978b-60693864621d":{"tf":1},"63ac5103-3ef6-5b7f-a9d0-eb1a0e7043fe":{"tf":1}},"df":2}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"0fb9bd6d-e7c8-5773-96a8-ecf07e67f27d":{"tf":1},"6b529bb2-d33d-57a7-899a-98adedaa8582":{"tf":1}},"df":2}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"3dbe5920-c180-5ff7-b75b-737326f5e84d":{"tf":1}},"df":1}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"0fb9bd6d-e7c8-5773-96a8-ecf07e67f27d":{"tf":1}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"e77352b3-25b9-5adb-b316-4ba660155978":{"tf":1},"aaf73720-fe32-5b67-af9d-698e487a119a":{"tf":1}},"df":2}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"3dbe5920-c180-5ff7-b75b-737326f5e84d":{"tf":1}},"df":1}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"63ac5103-3ef6-5b7f-a9d0-eb1a0e7043fe":{"tf":1}},"df":1}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"6b529bb2-d33d-57a7-899a-98adedaa8582":{"tf":1}},"df":1}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"tf":1}},"df":1}}}}},"tags":{"root":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"tf":1}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{"0751a9a3-8b65-5c76-9ca7-527e908dba83":{"tf":1}},"df":1}}}}}}},"pipeline":["trimmer","stopWordFilter","stemmer"]}}}}